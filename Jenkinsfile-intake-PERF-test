def notifyBuild(String buildStatus, Exception e) {
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = """*${buildStatus}*: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nMore detail in console output at <${env.BUILD_URL}|${env.BUILD_URL}>"""
  def details = """${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\n
    Check console output at ${env.BUILD_URL} """
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
    details +="<p>Error message ${e.message}, stacktrace: ${e}</p>"
    summary +="\nError message ${e.message}, stacktrace: ${e}"
  }

}

node ('preint') {
   properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')),
              [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
			  parameters([
			  string(defaultValue: 'http://perry.perf.cwds.io', description: 'Authentication URL', name: 'AUTH_URL'),
			  string(defaultValue: 'https://perf.cwds.ca.gov', description: '', name: 'APP_URL')]),pipelineTriggers([])])

   def errorcode = null;
   def buildInfo = '';

 try {

   stage('Preparation') {
		  cleanWs()
		  git branch: 'master', credentialsId: '433ac100-b3c2-4519-b4d6-207c029a103b', url: 'git@github.com:ca-cwds/performance_testing.git'
   }
   stage('Build Docker'){
        sh 'docker-compose build'
		withDockerRegistry([credentialsId: 'a1315b14-e449-464b-a80a-28d8f55143a9']) {
			sh "docker tag intake_performance_test cwds/performance_testing:${APP_VERSION}"
			sh "docker push cwds/intake_performance_testing:${APP_VERSION}"
		}
	 }
   stage('Run tests'){
      withEnv(["APP_URL=${APP_URL}",
               "AUTH_URL=${AUTH_URL}",
               "DISPLAY=:99"])
               {
                sh 'docker-compose run Xvfb :99 && bzt jmeter-config.yml -o scenarios.simple.variables.app_url=${APP_URL}'
      }
	  }
            stage ('Reports') {
            
             }

	  } catch (Exception e)    {
	   errorcode = e
	   currentBuild.result = "FAIL"
	   notifyBuild(currentBuild.result,errorcode)
	}
	finally {
	     fingerprint 'reports/*'

	     junit allowEmptyResults: true, testResults: 'reports/TEST-*.xml'

	}
}
